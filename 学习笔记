#设置路由装饰器，以‘/’为默认结尾
@app.route('/')
    def index():
        return"111"
#路由装饰器实现原理：
#def route(self, rule, **option):
#    def decorator(f):
#        self.add_url_rule(rule, endpoint, f, **options)
#        return f
#    rerturn decorator
#将rule字符串与视图函数绑定，通过add_url_rule实现。

#根据请求的不同路径访问不同函数
@app.route('/index')
    def index():
        return"111"
@app.route('/test')
    def index():
        return"222"

#路由路径中通过'<name>'或'<类型:name>'添加变量,标记会作为关键字参数传递给函数
#转换器类型包括int,float,str（不含'/'）,path（包含'/'），uuid
#视图函数的返回值是一个response对象，只能为str,tuple,dict,response,WSGI等字符串类型
@app.route('/test/<a>')
    def index(a):
        return a
@app.route('/test/<int:a>')
    def index(a):
        return str(a)


#run(host='ip地址', port='端口号')
#ip + 端口号 对应一个程序，host改为0.0.0.0,则外网可以访问，默认为本机。
#服务器开发环境包括development、production、testing
#debug = True : 开启debug模式，自动从服务器加载最新代码，适用于development环境
#debug = False : 默认，不会自动更新，适用于production环境
#注意:在启动前设置端口号！
app.run(host = '127.0.0.1:5000', port = '8080', debug = 'True')


#一般设置配置文件setting.py对服务器的启动脚本进行基本设置，再导入，利用app.config.from_object(配置文件名)
app.config.from_object(seettings)


#request与response
#request：
#请求行：URL(访问地址);method(请求方法): get/post;...
#请求头:key:value(键值对)
#请求体:一般post才有
#response：
#响应行:状态码 200-OK/404-ERROR/500/302/...
#响应头:key:value(键值对)  文本的配置信息
#响应体:html代码


#render_template:是融合网页代码与python的接口函数，将写好的网页的名称作为参数传入并返回新变量，则网页成功嵌套入python项目中。
#网页文件一般都在Template文件夹下寻找
@app.route('/index')
def register():
    r = render_template('网页名')
    return r


#打印路由规则表：由" '路由路径'->'view函数名' "的多个元素组成的列表
print(app.url_map)


#获取提交数据。通过按钮提交的数据传递到request.args形成的字典中，只能用get方法获取表单元素的名称对应的值(post不行)，即传递的数据。
#所有的关键字均为html表单中的每个元素的单独的设定名称；表单form的action为传递后台的路由路径名
#如果请求method是post则需要用request.form.get()
request.args.get('关键字')-----get方式
request.form.get('关键字')-----post方式，但app.route()中要添加methods=['GET', 'POST']


#列表中的所有元素转化成一个字符串:json字符串
j_str = json.dumps(users)


#redirect函数会产生两次响应:1.302状态码 + location指向的地址名；2.重定向地址的内容
return redirect('/路径名')
#url_for()：路径反向解析。提供route装饰器中的endpoint参数名(相当于装饰器或view函数的别名)读取对应路由路径，用于路径复杂情况。
url = url_for('index')
项目常用写法：return redirect(url_for('index'))


#视图函数返回值(response响应)：
#1.str                  (response对象)
#2.dict                 (json格式)
#2.response对象         (response对象)
#2.make_response()      (response对象)
#2.redirect()           (重定向，302)
#2.render_template()    (模板渲染)


#模板语法(jinja2引擎)
#声明变量:{{ var }}
#在模板中获取view传递的变量
#若模板文件变量名与传参不匹配，则返回空字符
name = 'peter'
age = 23
return render_template('show.html', name=name, age=age)

#模板可通过{{ a.0 }}、{{ a[0] }}、{{ a.get('name') }}访问列表、字典元素、类属性
#服务器注释：{#  #}        浏览器注释：<!--  -->

#for循环:
{% for i in lists %}
    {{ i }}
{% endfor %}
#if条件：
{% if a|length > 3 %}
    {{ a }}
{% endif %}
#(记住不要忘记结束语句!)
#if可以添加进标签里判断是否改变局部(简化代码)
<tr {%if loop.last %} style="background-color:black" {% endif %}>
    ......
</tr>
#for的内置变量loop:
#loop.index:正序索引(从1开始)；loop.index0:正序索引(从0开始)；loop.revindex:逆序索引(到1结束)；loop.revindex0:逆序索引(到0结束)；

#html添加样式表:
#类样式：
<style>
    .a{color:blue;}
</style>
<li class='a'>样式</li>
#标签样式：
<style>
    #head{color:blue;}
    #head ul{list-style:none;}
</style>

#样式表链接：(地址链接均采用‘{{ url_for('static', filename='static路径下相对路径') }}’)
<link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
#图片链接：
<img src="{{ url_for('static', filename='images/a1.png') }}" alt="">

#模板过滤器:{% 变量名|过滤器 %}  {% 变量名|过滤器(*args) %}
#字符串常用过滤器操作：
#防止符号转义，保留正常html标签效果：{% 变量名|safe %}
#词首大写：capitalize;大小写转换：lower upper;一句话每词首大写：title;逆序:reverse;格式化匹配:format()
#列表常用过滤器操作：
#提取首元素：first;提取尾元素：last;求和：sum;排序：sort;求长：length
#字典常用过滤器操作：
#获取键：list1.keys();获取值：list1.keys()；获取键值对：list1.items(),两个参数


#自定义过滤器:
#1.调用flask模块中的add_route_filter方法完成。
app.add_route_filter(新函数名， '自定义函数名')
#2.通过装饰器定义完成
@app.template_filter('自定义函数名')
def fun():
    return 'abc'
#(一定要有返回值。否则无法显示!)


#模板继承：(部分内容需要修改时)
#1.定义父模板，对预留位置使用block；创建子模板时用extends继承，并填充变化部分。
#注：提前预留样式与脚本的内容！
{% block id名称 %}
    填充内容
{% endblock %}
{% extends '父模板名.html' %}

#模板包含：（非全部，部分页面需要相同的模板）
{% include 'templates下路径文件夹/xxx.html' %}


